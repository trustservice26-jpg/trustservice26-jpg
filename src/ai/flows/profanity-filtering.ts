// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Implements profanity filtering for chat messages using Genkit.
 *
 * @exports ProfanityFilteringInput - The input type for the profanityFiltering function.
 * @exports ProfanityFilteringOutput - The output type for the profanityFiltering function.
 * @exports profanityFiltering - An async function that filters profanity from input text.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProfanityFilteringInputSchema = z.object({
  text: z.string().describe('The text to filter for profanity.'),
});

export type ProfanityFilteringInput = z.infer<typeof ProfanityFilteringInputSchema>;

const ProfanityFilteringOutputSchema = z.object({
  filteredText: z.string().describe('The text with profanity filtered out.'),
  isProfane: z.boolean().describe('Whether the input text contained profanity.'),
});

export type ProfanityFilteringOutput = z.infer<typeof ProfanityFilteringOutputSchema>;

export async function profanityFiltering(input: ProfanityFilteringInput): Promise<ProfanityFilteringOutput> {
  return profanityFilteringFlow(input);
}

const profanityFilterPrompt = ai.definePrompt({
  name: 'profanityFilterPrompt',
  input: {schema: ProfanityFilteringInputSchema},
  output: {schema: ProfanityFilteringOutputSchema},
  prompt: `You are a content moderation tool that flags and filters out profanity from user-generated text.

  Analyze the input text and determine if it contains any profanity, hate speech, or offensive language.
  If the input contains such content, replace it with asterisks ('***') to mask the offensive words, and set isProfane to true. If not, return the original text and set isProfane to false.

  Input Text: {{{text}}}`,
  config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
    ],
  },
});

const profanityFilteringFlow = ai.defineFlow(
  {
    name: 'profanityFilteringFlow',
    inputSchema: ProfanityFilteringInputSchema,
    outputSchema: ProfanityFilteringOutputSchema,
  },
  async input => {
    const {output} = await profanityFilterPrompt(input);
    return output!;
  }
);
