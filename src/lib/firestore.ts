// This is an autogenerated file from Firebase Studio.

import {
  collection,
  query,
  onSnapshot,
  orderBy,
  addDoc,
  doc,
  getDoc,
  setDoc,
  where,
  getDocs,
} from 'firebase/firestore';
import { firestore } from './firebase';
import type { User, Message } from './data';
import { ADMIN_USER_ID } from './data';

// --- User Functions ---
export async function getUser(userId: string): Promise<User | null> {
    if (!userId) return null;
    const userDocRef = doc(firestore, 'users', userId);
    const userDoc = await getDoc(userDocRef);
    if (userDoc.exists()) {
        return { id: userDoc.id, ...userDoc.data() } as User;
    }
    return null;
}

export async function createAnonymousUser(): Promise<User> {
  // To create a more random-looking user ID for anonymity.
  const randomNumber = Math.floor(Math.random() * 10000);
  const newUser: Omit<User, 'id'> = {
    name: `User-${randomNumber}`,
    avatarUrl: `https://picsum.photos/seed/${Date.now()}/200/200`,
    isOnline: true,
  };
  const docRef = await addDoc(collection(firestore, 'users'), newUser);
  return { id: docRef.id, ...newUser };
}


// --- Message Functions ---
export function getMessages(
  chatId: string,
  callback: (messages: Message[]) => void
): () => void {
  const messagesCol = collection(firestore, 'messages');
  const q = query(
    messagesCol,
    where('chatId', '==', chatId),
    orderBy('timestamp', 'asc')
  );

  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const messages = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      timestamp: doc.data().timestamp.toDate().toISOString(),
    } as Message));
    callback(messages);
  });

  return unsubscribe;
}

export async function createMessage(
  text: string,
  userId: string,
  chatId: string
): Promise<Message> {
  const newMessage: Omit<Message, 'id' | 'timestamp'> & { timestamp: Date, chatId: string } = {
    text,
    userId,
    chatId,
    timestamp: new Date(),
  };

  const docRef = await addDoc(collection(firestore, 'messages'), newMessage);
  
  return {
      id: docRef.id,
      text: newMessage.text,
      userId: newMessage.userId,
      chatId: newMessage.chatId,
      timestamp: newMessage.timestamp.toISOString(),
  };
}

// Seed function is no longer needed for this private chat model.
export async function seedInitialData() {
  // Admin user is no longer needed.
}
