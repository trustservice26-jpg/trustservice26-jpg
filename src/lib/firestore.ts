
// This is an autogenerated file from Firebase Studio.

import {
  collection,
  query,
  onSnapshot,
  orderBy,
  addDoc,
  doc,
  getDoc,
  setDoc,
  serverTimestamp,
  Timestamp,
} from 'firebase/firestore';
import { firestore } from './firebase';
import type { User, Message, Presence } from './data';

// --- Pre-defined Users ---
export const PREDEFINED_USERS: User[] = [
  { id: 'user-24', name: '24', avatarUrl: `https://picsum.photos/seed/24/200/200` },
  { id: 'user-25', name: '25', avatarUrl: `https://picsum.photos/seed/25/200/200` },
];


// --- User Functions ---
export async function getUser(userId: string): Promise<User | null> {
    if (!userId) return null;
    
    const predefinedUser = PREDEFINED_USERS.find(u => u.id === userId);
    if (predefinedUser) {
        return predefinedUser;
    }

    // In this version, we only use predefined users, so we don't need to fetch from 'users' collection.
    // This function is kept for potential future use if dynamic users are re-enabled.
    return null;
}


export async function getOrCreateUserForChat(chatId: string): Promise<User> {
    const chatUserKey = `candid-connect-user-id-${chatId}`;
    let assignedUserId = localStorage.getItem(chatUserKey);

    // If user already has an ID for this chat in this browser, return that user.
    if (assignedUserId) {
        const existingUser = PREDEFINED_USERS.find(u => u.id === assignedUserId);
        if (existingUser) {
            return existingUser;
        }
    }
    
    // If no user in localStorage, we need to assign one.
    // Check current presence to see who is already online.
    const presenceDocRef = getPresenceDocRef(chatId);
    const presenceDoc = await getDoc(presenceDocRef);
    const presenceData = presenceDoc.exists() ? presenceDoc.data() : {};

    const user24 = PREDEFINED_USERS[0];
    const user25 = PREDEFINED_USERS[1];

    // Check if user 24 is online. If not, assign user 24.
    if (!presenceData[user24.id] || !presenceData[user24.id].online) {
        localStorage.setItem(chatUserKey, user24.id);
        return user24;
    }
    
    // If user 24 is online, assign user 25.
    localStorage.setItem(chatUserKey, user25.id);
    return user25;
}


// --- Message Functions ---
export function getMessages(
  chatId: string,
  callback: (messages: Message[]) => void
): () => void {
  const messagesCol = collection(firestore, `chats/${chatId}/messages`);
  const q = query(
    messagesCol,
    orderBy('timestamp', 'asc')
  );

  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const messages = querySnapshot.docs.map(doc => {
      const data = doc.data();
      // Firestore timestamps can be null if the message is just being written.
      // They can also be a Firestore Timestamp object. We need to handle both cases.
      const timestamp = data.timestamp as Timestamp | null;
      return {
        id: doc.id,
        ...data,
        timestamp: timestamp ? timestamp.toDate().toISOString() : new Date().toISOString(),
      } as Message;
    });
    callback(messages);
  });

  return unsubscribe;
}

export async function createMessage(
  text: string,
  userId: string,
  chatId: string
): Promise<Message> {
  const messagesCol = collection(firestore, `chats/${chatId}/messages`);
  
  const newMessageData = {
    text,
    userId,
    chatId,
    timestamp: serverTimestamp(),
  };

  const docRef = await addDoc(messagesCol, newMessageData);
  
  return {
      id: docRef.id,
      text: text,
      userId: userId,
      chatId: chatId,
      timestamp: new Date().toISOString(), // Return optimistic timestamp
  };
}


// --- Presence Functions ---
const getPresenceDocRef = (chatId: string) => doc(firestore, `chats/${chatId}/presence`, 'users');

export async function updatePresence(chatId: string, userId: string, online: boolean) {
  const presenceDocRef = getPresenceDocRef(chatId);
  try {
    // Use setDoc with merge to update only the specific user's status
    await setDoc(presenceDocRef, {
      [userId]: { online, timestamp: serverTimestamp() }
    }, { merge: true });
  } catch (error) {
    console.error("Error updating presence:", error);
  }
}

export function subscribeToPresence(chatId: string, callback: (presence: Presence) => void): () => void {
    const presenceDocRef = getPresenceDocRef(chatId);
    
    const unsubscribe = onSnapshot(presenceDocRef, (doc) => {
        if (doc.exists()) {
            callback(doc.data() as Presence);
        } else {
            // Document might not exist initially
            callback({});
        }
    });

    return unsubscribe;
}
