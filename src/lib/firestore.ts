// This is an autogenerated file from Firebase Studio.

import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  onSnapshot,
  orderBy,
  limit,
  doc,
  getDoc,
  setDoc,
} from 'firebase/firestore';
import { firestore } from './firebase';
import type { User, Message } from './data';
import { ADMIN_USER_ID } from './data';

// --- User Functions ---
export async function getUser(userId: string): Promise<User | null> {
    if (!userId) return null;
    const userDocRef = doc(firestore, 'users', userId);
    const userDoc = await getDoc(userDocRef);
    if (userDoc.exists()) {
        return { id: userDoc.id, ...userDoc.data() } as User;
    }
    return null;
}

export function getAllUsers(callback: (users: User[]) => void): () => void {
  const usersCol = collection(firestore, 'users');
  const q = query(usersCol);

  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const users = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
    } as User));
    callback(users);
  });

  return unsubscribe;
}


export async function createAnonymousUser(): Promise<User> {
  const userCountSnapshot = await getDocs(collection(firestore, 'users'));
  const userCount = userCountSnapshot.size;

  const newUser: Omit<User, 'id'> = {
    name: `Visitor-${userCount + 1}`,
    avatarUrl: `https://picsum.photos/seed/${Date.now()}/200/200`,
    isOnline: true,
  };
  const docRef = await addDoc(collection(firestore, 'users'), newUser);
  return { id: docRef.id, ...newUser };
}

// --- Message Functions ---
export function getMessages(
  userId: string,
  callback: (messages: Message[]) => void
): () => void {
  const messagesCol = collection(firestore, 'messages');
  const dmId = [ADMIN_USER_ID, userId].sort().join('-');
  const q = query(
    messagesCol,
    where('dmId', '==', dmId),
    orderBy('timestamp', 'asc')
  );

  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const messages = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      timestamp: doc.data().timestamp.toDate().toISOString(),
    } as Message));
    callback(messages);
  });

  return unsubscribe;
}

export async function createMessage(
  text: string,
  userId: string,
): Promise<Message> {
  const newMessage: Omit<Message, 'id' | 'timestamp'> & { timestamp: Date } = {
    text,
    userId,
    timestamp: new Date(),
  };

  const dmId = [ADMIN_USER_ID, userId].sort().join('-');
  newMessage.dmId = dmId;

  const docRef = await addDoc(collection(firestore, 'messages'), newMessage);
  
  return {
      id: docRef.id,
      text: newMessage.text,
      userId: newMessage.userId,
      timestamp: newMessage.timestamp.toISOString(),
      ...(newMessage.dmId && { dmId: newMessage.dmId }),
  };
}

// Helper to create initial data if collections are empty
export async function seedInitialData() {
    const adminUserDoc = await getDoc(doc(firestore, 'users', ADMIN_USER_ID));
    if (!adminUserDoc.exists()) {
       await setDoc(doc(firestore, 'users', ADMIN_USER_ID), {
         name: 'Admin', 
         avatarUrl: `https://picsum.photos/seed/admin/200/200`, 
         isOnline: true 
       });
    }
}
