// This is an autogenerated file from Firebase Studio.

import {
  collection,
  query,
  onSnapshot,
  orderBy,
  addDoc,
  doc,
  getDoc,
  serverTimestamp,
  Timestamp,
} from 'firebase/firestore';
import { firestore } from './firebase';
import type { User, Message } from './data';

// --- User Functions ---
export async function getUser(userId: string): Promise<User | null> {
    if (!userId) return null;
    try {
        const userDocRef = doc(firestore, 'users', userId);
        const userDoc = await getDoc(userDocRef);
        if (userDoc.exists()) {
            return { id: userDoc.id, ...userDoc.data() } as User;
        }
        return null;
    } catch (error) {
        console.error("Error fetching user:", error);
        return null;
    }
}

export async function createAnonymousUser(): Promise<User> {
  // To create a more random-looking user ID for anonymity.
  const randomNumber = Math.floor(Math.random() * 10000);
  const newUser: Omit<User, 'id'> = {
    name: `User-${randomNumber}`,
    avatarUrl: `https://picsum.photos/seed/${Date.now()}/200/200`,
    isOnline: true,
  };
  const docRef = await addDoc(collection(firestore, 'users'), newUser);
  return { id: docRef.id, ...newUser };
}


// --- Message Functions ---
export function getMessages(
  chatId: string,
  callback: (messages: Message[]) => void
): () => void {
  const messagesCol = collection(firestore, `chats/${chatId}/messages`);
  const q = query(
    messagesCol,
    orderBy('timestamp', 'asc')
  );

  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const messages = querySnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        id: doc.id,
        ...data,
        timestamp: (data.timestamp as Timestamp)?.toDate().toISOString() || new Date().toISOString(),
      } as Message;
    });
    callback(messages);
  });

  return unsubscribe;
}

export async function createMessage(
  text: string,
  userId: string,
  chatId: string
): Promise<Message> {
  const messagesCol = collection(firestore, `chats/${chatId}/messages`);
  
  const newMessageData = {
    text,
    userId,
    timestamp: serverTimestamp(),
  };

  const docRef = await addDoc(messagesCol, newMessageData);
  
  return {
      id: docRef.id,
      text: text,
      userId: userId,
      chatId: chatId,
      timestamp: new Date().toISOString(), // Return optimistic timestamp
  };
}
